//https://leetcode.com/problems/balanced-binary-tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

private: 
 bool isBalancedTree;
public:

    int getHeights(TreeNode *root)
    {
        if(root == NULL) return 0;

        int a, b;
        a = getHeights(root->left);
        b = getHeights(root->right);


        if(abs(a-b) > 1){
            cout<<root->val<<endl;
            cout<<a<<b<<endl;
            isBalancedTree = false;
        }
        return max(a,b) + 1;
    }


    bool isBalanced(TreeNode* root) {
        isBalancedTree= true;
        getHeights(root);
        return isBalancedTree;

    }
};