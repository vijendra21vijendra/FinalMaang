//https://leetcode.com/problems/binary-tree-inorder-traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> solution;
        inorder(root,solution);
       return solution; 
    }
    void inorder(TreeNode * root, vector<int> &solution)
    {
        if(root != NULL){
            inorder(root->left, solution);
            solution.push_back(root->val);
            inorder(root->right,solution);
        }
    }
};




-------------------------iterative approach------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        set<TreeNode*> hashset;
        vector<int> ans;
        stack<TreeNode*> stck;

        if(root == NULL) return ans;
        stck.push(root);
        hashset.insert(root);
        while(!stck.empty())
        {
            TreeNode *p = stck.top();

            if(p->left == NULL || hashset.count(p->left)>0){
                   stck.pop();
                   ans.push_back(p->val);

                   if(p->right != NULL){
                       stck.push(p->right);
                   }

            }else{
                stck.push(p->left);
                hashset.insert(p->left);
            }
        }


     return ans;
    }
};