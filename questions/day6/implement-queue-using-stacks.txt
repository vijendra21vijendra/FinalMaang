//https://leetcode.com/problems/implement-queue-using-stacks
class MyQueue {

private:
stack<int> stack1, stack2;
public:
    MyQueue() {
        
    }
    
    void push(int x) {
        stack1.push(x);
    }
    
    int pop() {
        while(!stack1.empty()){
            stack2.push(stack1.top());
            stack1.pop();
        }
        int val = stack2.top();
        stack2.pop();
        while(!stack2.empty()){
            stack1.push(stack2.top());
            stack2.pop();
        }

        return val;
    }
    
    int peek() {
        while(!stack1.empty()){
            stack2.push(stack1.top());
            stack1.pop();
        }
        int val = stack2.top();
        while(!stack2.empty()){
            stack1.push(stack2.top());
            stack2.pop();
        }

        return val;
    }
    
    bool empty() {
        return stack1.size()==0;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
 
 
 ----------------made peekElement o(1)
 
 
 class MyQueue {

private:
stack<int> stack1, stack2;
int peekElement;
public:
    MyQueue() {
        peekElement=-1;
    }
    
    void push(int x) {
        if(stack1.size()==0){
            peekElement = x;
        }
        stack1.push(x);
    }
    
    int pop() {
        while(!stack1.empty()){
            stack2.push(stack1.top());
            stack1.pop();
        }
        int val = stack2.top();
        stack2.pop();
        peekElement = (stack2.size()> 0?stack2.top(): -1);
        while(!stack2.empty()){
            stack1.push(stack2.top());
            stack2.pop();
        }

        return val;
    }
    
    int peek() {
        return peekElement;
    }
    
    bool empty() {
        return stack1.size()==0;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
 
 
 
 
 
 
 
 -----------------good amortized solution ----------------
 
 class MyQueue {

private:
stack<int> stack1, stack2;
int peekElement;
public:
    MyQueue() {
        peekElement=-1;
    }
    
    void push(int x) {
        if(stack1.size()==0 && peekElement==-1){
            peekElement = x;
        }
        stack1.push(x);
    }
    
    int pop() {

        if(stack2.empty()){

            while(!stack1.empty()){
            stack2.push(stack1.top());
            stack1.pop();
            }

        }
        int val = stack2.top();
        stack2.pop();
        peekElement = (stack2.size()> 0?stack2.top(): -1);
        if(peekElement == -1){
             while(!stack1.empty()){
            stack2.push(stack1.top());
            stack1.pop();
            }
            peekElement = (stack2.size()> 0?stack2.top(): -1);
        }
        return val;
    }
    
    int peek() {
        return peekElement;
    }
    
    bool empty() {
        return (stack1.size() + stack2.size())==0;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */